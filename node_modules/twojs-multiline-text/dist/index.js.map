{"version":3,"file":"index.js","sources":["../src/multiline-text.ts"],"sourcesContent":["import Two from 'two.js'\nimport wrap from 'word-wrapper'\n\nconst flag = (name: string) => (\n  target: any,\n  property: string\n) => {\n  const privateProperty = `_${property}`\n  const flagproperty = `_flag${name[0].toUpperCase()}${name.slice(1)}`\n\n  Object.defineProperty(target, property, {\n    get (this: any): any {\n      return this[privateProperty]\n    },\n\n    set (this: any, value: any) {\n      this[privateProperty] = value\n      this[flagproperty] = true\n    }\n  })\n}\n\ntype OptionallyOffscreenCanvasRenderingContext2D = (\n  CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D\n)\n\ntype Text = Pick<InstanceType<typeof Two.Text>, (\n  'value' |\n  'family' |\n  'size' |\n  'leading' |\n  'alignment' |\n  'fill' |\n  'stroke' |\n  'linewidth' |\n  'style' |\n  'weight' |\n  'decoration' |\n  'baseline' |\n  'opacity' |\n  'visible' |\n  'rotation' |\n  'scale' |\n  'translation' |\n  'clone' |\n  'getBoundingClientRect'\n)>\n\nexport class MultilineText extends Two.Group implements Text {\n  private _flagWrapping: boolean = true\n  private _flagStyle: boolean = true\n\n  @flag('wrapping') public width: number\n  @flag('wrapping') public measure: 'font' | 'monospace' | 'length'\n  @flag('wrapping') public mode: 'normal' | 'pre' | 'nowrap'\n  @flag('wrapping') public value: string\n  @flag('wrapping') public family: string\n  @flag('wrapping') public size: number\n  @flag('wrapping') public weight: number\n  @flag('style') public style: string\n  @flag('style') public leading: number\n  @flag('style') public absoluteLeading: boolean\n  @flag('style') public alignment: string\n  @flag('style') public fill: string\n  @flag('style') public stroke: string\n  @flag('style') public linewidth: number\n  @flag('style') public decoration: string\n  @flag('style') public baseline: string\n  @flag('style') public opacity: number\n  @flag('style') public visible: boolean\n\n  public constructor (message: string, x: number = 0, y: number = 0, {\n    width = Infinity,\n    measure = 'font',\n    mode = 'normal',\n    family = 'sans-serif',\n    size = 13,\n    weight = 500,\n    style = 'normal',\n    leading = 1.2,\n    absoluteLeading = false,\n    alignment = 'middle',\n    fill = '#000',\n    stroke = 'transparent',\n    linewidth = 1,\n    decoration = 'none',\n    baseline = 'middle',\n    opacity = 1,\n    visible = true\n  }: {\n    width?: number\n    measure?: 'font' | 'monospace' | 'length'\n    mode?: 'normal' | 'pre' | 'nowrap'\n    family?: string\n    size?: number\n    weight?: number\n    style?: string\n    leading?: number\n    absoluteLeading?: boolean\n    alignment?: string\n    fill?: string\n    stroke?: string\n    linewidth?: number\n    decoration?: string\n    baseline?: string\n    opacity?: number\n    visible?: boolean\n  } = {}) {\n    super()\n\n    this.translation.set(x, y)\n    this.width = width\n    this.measure = measure\n    this.mode = mode\n    this.value = message\n    this.family = family\n    this.size = size\n    this.leading = leading\n    this.absoluteLeading = absoluteLeading\n    this.alignment = alignment\n    this.fill = fill\n    this.stroke = stroke\n    this.linewidth = linewidth\n    this.weight = weight\n    this.style = style\n    this.decoration = decoration\n    this.baseline = baseline\n    this.opacity = opacity\n    this.visible = visible\n  }\n\n  public get computedLeading (): number {\n    return this.absoluteLeading ? this.leading : this.size * this.leading\n  }\n\n  private get context (): OptionallyOffscreenCanvasRenderingContext2D {\n    const value = (typeof OffscreenCanvas === 'function'\n      ? new OffscreenCanvas(1, 1)\n      : document.createElement('canvas')\n    ).getContext('2d')!\n\n    Object.defineProperty(MultilineText.prototype, 'context', {\n      value,\n      writable: false,\n      configurable: false\n    })\n\n    return value\n  }\n\n  private get _measureMonospace (): (\n    text: string,\n    start: number,\n    end: number,\n    width: number\n  ) => { start: number, end: number } {\n    const charWidth = this.context.measureText('M').width\n    return (text: string, start: number, end: number, width: number) => ({\n      start,\n      end: start + Math.min(\n        end - start,\n        ~~(width / charWidth),\n        ~~((end - start) * charWidth)\n      )\n    })\n  }\n\n  private _measureLength = (\n    text: string,\n    start: number,\n    end: number,\n    width: number\n  ): { start: number, end: number } => ({\n    start,\n    end: start + Math.min(width, end - start)\n  })\n\n  private _measureFont = (\n    text: string,\n    start: number,\n    end: number,\n    width: number\n  ): { start: number, end: number } => {\n    while (this.context.measureText(text.slice(start, end)).width > width) {\n      end--\n    }\n\n    return { start, end }\n  }\n\n  private _prepareMeasureContext (): void {\n    this.context.font = `${\n      this.style\n    } ${\n      this.weight\n    } ${\n      this.size\n    }px ${\n      this.family\n    }`\n  }\n}\n\nObject.assign(MultilineText.prototype as any, {\n  _update(bubbles: boolean): any {\n    if (this._flagWrapping) {\n      let measure: (\n        text: string,\n        start: number,\n        end: number,\n        width: number\n      ) => { start: number, end: number }\n\n      if (this.measure === 'length') {\n        measure = this._measureLength\n      } else {\n        this._prepareMeasureContext()\n        measure = this.measure === 'monospace'\n          ? this._measureMonospace\n          : this._measureFont\n      }\n\n      const texts = this.children as Text[]\n      const lines = wrap\n        .lines(this.value, {\n          measure,\n          width: this.width,\n          mode: this.mode\n        })\n        .map(({ start, end }) => this.value.slice(start, end))\n\n      while (texts.length > lines.length) {\n        this.remove(texts[0])\n      }\n\n      texts.forEach((text, index) => {\n        text.value = lines[index].trim()\n      })\n\n      while (texts.length < lines.length) {\n        this.add(new Two.Text(lines[texts.length].trim(), 0, 0))\n      }\n\n      this._flagStyle = true\n    }\n\n    if (this._flagStyle) {\n      const {\n        family,\n        size,\n        computedLeading: leading,\n        alignment,\n        fill,\n        stroke,\n        linewidth,\n        style,\n        weight,\n        decoration,\n        baseline,\n        opacity,\n        visible\n      } = this\n\n      let offset: number = 0\n\n      switch (alignment) {\n        case 'end':\n          offset = this.width\n          break\n\n        case 'center':\n          offset = this.width / 2\n          break\n      }\n\n      ;(this.children as Text[]).forEach((text, index) => {\n        text.family = family\n        text.size = size\n        text.leading = leading\n        text.alignment = alignment\n        text.fill = fill\n        text.stroke = stroke\n        text.linewidth = linewidth\n        text.style = style\n        text.weight = weight\n        text.decoration = decoration\n        text.baseline = baseline\n        text.opacity = opacity\n        text.visible = visible\n        text.translation.set(offset, leading * index)\n      })\n    }\n\n    (Two.Group.prototype as unknown as { _update (bubbles?: boolean): void })\n      ._update.call(this, bubbles)\n\n    return this\n  },\n\n  flagReset(): any {\n    this._flagWrapping = this._flagStyle = false\n\n    ;(Two.Group.prototype as unknown as { flagReset (): void })\n      .flagReset.call(this)\n\n    return this\n  }\n} as any)\n"],"names":["Two","wrap"],"mappings":"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"}